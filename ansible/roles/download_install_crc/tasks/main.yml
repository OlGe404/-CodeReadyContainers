---
- name: Check presence of pullsecret.json file
  ansible.builtin.stat: path="{{ playbook_dir }}/pullsecret.json"
  register: pullsecret_json

- name: Fail if pullsecret.json file doesn't exist
  ansible.builtin.fail:
    msg: >-
      The mandatory 'ansible/pullsecret.json' file doesn't exist.
      Checkout the README on how to create it.
  when: not pullsecret_json.stat.exists

- name: Fail if crc_version is not valid
  ansible.builtin.fail: 
    msg: >-
      The specified crc_version is not valid.
      Checkout the 'update' section in README on which versions are supported.
  when: crc_version is not regex("([\d.]+)")

- name: Install required software packages
  become: true
  ansible.builtin.apt:
    name: "{{ item }}"
    update_cache: yes
    cache_valid_time: 86400
  loop: 
    - qemu-kvm
    - libvirt-daemon
    - libvirt-daemon-system
    - network-manager

- name: Download and unarchive CRC
  become: true
  ansible.builtin.unarchive:
    src: "https://developers.redhat.com/content-gateway/file/pub/openshift-v4/clients/crc/{{ crc_version }}/crc-linux-amd64.tar.xz"
    dest: /usr/local/bin
    mode: 0755
    owner: "{{ lookup('env', 'USER') }}"
    group: root
    remote_src: true

- name: Make CRC binary executable
  become: true
  ansible.builtin.copy:
    src: "/usr/local/bin/crc-linux-{{ crc_version }}-amd64/crc"
    dest: /usr/local/bin
    mode: 0755
    owner: "{{ lookup('env', 'USER') }}"
    group: root
    remote_src: true

- name: Install CRC
  block:
    - name: Add current user to 'libvirt' group
      become: true
      ansible.builtin.user:
        name: "{{ lookup('env', 'USER') }}"
        groups: ["libvirt"]
        append: true

    - name: Enable cluster monitoring
      ansible.builtin.include_tasks:
        file: cluster_monitoring.yaml
      when: enable_cluster_monitoring

    - name: Setup and start CRC (this can take up to 1h)
      ansible.builtin.command: sg libvirt -c "crc {{ item }}"
      loop:
        - setup
        - config set consent-telemetry no
        - config set kubeadmin-password kubeadmin
        - start --pull-secret-file {{ playbook_dir }}/pullsecret.json

    - name: Copy bundled 'oc' binary to /usr/local/bin
      become: true
      ansible.builtin.copy:
        src: "{{ lookup('env', 'HOME') }}/.crc/bin/oc/oc"
        dest: /usr/local/bin
        owner: "{{ lookup('env', 'USER') }}"
        group: root
        mode: 0755
        remote_src: true
        force: yes

- name: Run oc login
  ansible.builtin.command: >
    oc login -u developer -p developer 
    https://api.crc.testing:6443
    --insecure-skip-tls-verify

- name: Run, check, delete hazelcast pod as example
  ansible.builtin.shell: |
    oc new-project developer | true && \
    oc run hazelcast --image=hazelcast/hazelcast && \
    oc wait --for=condition=Ready --timeout 15m pod/hazelcast && \
    oc delete pod/hazelcast

- debug: 
    msg: "You can now login at https://console-openshift-console.apps-crc.testing."
