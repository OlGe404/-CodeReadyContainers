# code: language=ansible
---
- name: Install CRC
  hosts: localhost
  gather_facts: false
  vars_files: vars.yaml
  vars_prompt:
    - name: sudo_pass
      prompt: "Provide your sudo password to start the installation"

  pre_tasks:
    - name: Check pullsecret.json
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/pullsecret.json"
      register: pullsecret_json

    - name: Fail if it doesn't exist
      when: not pullsecret_json.stat.exists
      ansible.builtin.fail:
        msg: >-
          The mandatory 'pullsecret.json' file doesn't exist.
          Read the "Requirements" section in README.md on how to create it.

    - name: Fail if crc_version is not valid
      when: crc_version is not regex("([\d.]+)")
      ansible.builtin.fail:
        msg: >-
          The specified crc_version is not valid.
          Checkout the "Update" section in README.md on which versions are supported.

  tasks:
    - name: Install required packages
      become: true
      tags: prerequisites
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: true
        cache_valid_time: 86400
      loop:
        - qemu-kvm
        - libvirt-daemon
        - libvirt-daemon-system
        - network-manager

    - name: Download CRC {{ crc_version }}
      tags: download
      become: true
      ansible.builtin.unarchive:
        src: "https://developers.redhat.com/content-gateway/file/pub/openshift-v4/clients/crc/{{ crc_version }}/crc-linux-amd64.tar.xz"
        remote_src: true
        dest: /usr/local/bin
        mode: "0755"
        owner: "{{ ansible_user }}"
        group: root
        creates: "/usr/local/bin/crc-linux-{{ crc_version }}-amd64"
      register: crc_download
      until: crc_download is succeeded
      retries: 5
      delay: 3

    - name: Make CRC executable
      tags: download
      become: true
      ansible.builtin.copy:
        src: "/usr/local/bin/crc-linux-{{ crc_version }}-amd64/crc"
        remote_src: true
        dest: /usr/local/bin
        mode: "0755"
        owner: "{{ ansible_user }}"
        group: root

    - name: Add user to 'libvirt' group
      tags: download
      become: true
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups:
          - libvirt
        append: true

    - name: Enable cluster monitoring
      when: crc_cluster_monitoring
      tags: setup
      ansible.builtin.command: sg libvirt -c "crc config set {{ item }}"
      loop:
        - cpus 6
        - memory 14336
        - enable-cluster-monitoring true

    - name: Setup and start CRC (this can take up to 1h)
      tags: setup
      ansible.builtin.command: sg libvirt -c "crc {{ item }}"
      loop:
        - setup
        - config set consent-telemetry no
        - config set kubeadmin-password kubeadmin
        - start --pull-secret-file {{ playbook_dir }}/pullsecret.json

    - name: Setup oc
      tags: setup
      become: true
      ansible.builtin.copy:
        src: "{{ lookup('env', 'HOME') }}/.crc/bin/oc/oc"
        remote_src: true
        dest: /usr/local/bin
        owner: "{{ ansible_user }}"
        group: root
        mode: "0755"
        force: true

    - name: Run oc login
      tags: test
      ansible.builtin.command: >
        oc login -u developer -p developer https://api.crc.testing:6443 --insecure-skip-tls-verify

    - name: Run, check, delete hazelcast pod as example
      tags: test
      args:
        executable: /bin/bash
      ansible.builtin.shell: |
        set -o pipefail

        oc new-project developer | true
        oc run hazelcast --image=hazelcast/hazelcast
        oc wait --for=condition=Ready --timeout 15m pod/hazelcast
        oc delete pod/hazelcast

    - name: Print CRC webconsole info
      ansible.builtin.debug:
        msg: >-
          You can now login at https://console-openshift-console.apps-crc.testing with
          developer/developer or kubeadmin/kubeadmin credentials.
